"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/MyFirstContract.solidity-precompiled.test.ts
var MyFirstContract_solidity_precompiled_test_exports = {};
__export(MyFirstContract_solidity_precompiled_test_exports, {
  MyFirstContractPrecompiledTesteranto: () => MyFirstContractPrecompiledTesteranto
});
module.exports = __toCommonJS(MyFirstContract_solidity_precompiled_test_exports);
var import_chai = require("chai");

// features.test.mts
var import_Features = require("testeranto/src/Features");
var MyFeature = class extends import_Features.BaseFeature {
  constructor(name, due) {
    super(name);
    this.due = due;
  }
};
var features = {
  root: new MyFeature("kokomo bay!"),
  mint: new MyFeature("An ERC721 which is redeemable?!!!"),
  redemption: new MyFeature(
    "Redeems an ERC-721, marking its state as redeemed"
  ),
  federatedSplitContract: new MyFeature(
    "A website which can acts as a storefront"
  ),
  markRedeemed: new MyFeature(
    "Registers contract status as redeemed, and changes image"
  ),
  encryptShipping: new MyFeature(
    "Buyer encrypts plaintext message and stores value on contract"
  ),
  decryptShipping: new MyFeature("Vendor Decrypts plaintext message"),
  buildSilo: new MyFeature(
    "build the rocket silo",
    /* @__PURE__ */ new Date("2023-05-02T02:36:34+0000")
  ),
  buildRocket: new MyFeature(
    "build the rocket",
    /* @__PURE__ */ new Date("2023-06-06T02:36:34+0000")
  ),
  buildSatellite: new MyFeature(
    "build the rocket payload",
    /* @__PURE__ */ new Date("2023-06-06T02:36:34+0000")
  ),
  hello: new MyFeature("hello"),
  aloha: new MyFeature("aloha"),
  gutentag: new MyFeature("gutentag"),
  buenosDias: new MyFeature("buenos dias"),
  hola: new MyFeature("hola"),
  bienVenidos: new MyFeature("bien venidos"),
  walkingTheDog: new MyFeature("my favorite chore")
};
var priorityGraph = new import_Features.TesterantoGraphDirectedAcyclic("Priority");
priorityGraph.connect(`root`, `redemption`);
priorityGraph.connect(`root`, `federatedSplitContract`);
priorityGraph.connect(`root`, `mint`);
priorityGraph.connect(`redemption`, `markRedeemed`);
priorityGraph.connect(`redemption`, `encryptShipping`);
priorityGraph.connect(`redemption`, `decryptShipping`);
var semantic = new import_Features.TesterantoGraphDirected("some semantic directed graph");
semantic.connect(`hello`, `aloha`, "superceedes");
semantic.connect(`gutentag`, `hola`, "negates");
var undirected = new import_Features.TesterantoGraphUndirected(
  "an undirected semantic graph"
);
undirected.connect(`gutentag`, `aloha`, "related");
undirected.connect(`buildRocket`, `buildSatellite`, "overlap");
undirected.connect(`buildRocket`, `buildSilo`, "overlap");
var features_test_default = new import_Features.TesterantoFeatures(features, {
  undirected: [undirected],
  directed: [semantic],
  dags: [priorityGraph]
});

// myTests/solidity-precompiled.testeranto.test.ts
var import_ganache = __toESM(require("ganache"), 1);
var import_web3 = __toESM(require("web3"), 1);
var import_core_node = __toESM(require("testeranto/src/core-node"), 1);

// solidity:MyFirstContract
var MyFirstContract_default = { compilations: [{ sourceIndexes: ["/Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", "/Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol"], contracts: [{ contractName: "MyBaseContract", abi: [{ inputs: [], name: "count", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "get", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "inc", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "dec", outputs: [], stateMutability: "nonpayable", type: "function" }], metadata: '{"compiler":{"version":"0.8.14+commit.80d49f37"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dec","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"get","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inc","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol":"MyBaseContract"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol":{"keccak256":"0x2c9989f9cfb2684e68d41ffaa356340d76e93faaec230354b4ed74fae7431b29","license":"MIT","urls":["bzz-raw://8aae1d9dc24cce12f4b416d0fd1bc69026e5d991e005a5a8c2bba49ab912b0be","dweb:/ipfs/QmUnWMyzS4QQvhu3849LSb1tQuYq6SgkkviL3AWppjcj93"]}},"version":1}', devdoc: { kind: "dev", methods: {}, version: 1 }, userdoc: { kind: "user", methods: {}, version: 1 }, sourcePath: "/Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", source: "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract MyBaseContract {\n  uint256 public count;\n\n  // Function to get the current count\n  function get() public view returns (uint256) {\n    return count;\n  }\n\n  // Function to increment count by 1\n  function inc() public {\n    count += 1;\n  }\n\n  // Function to decrement count by 1\n  function dec() public {\n    // This function will fail if count = 0\n    count -= 1;\n  }\n}\n", sourceMap: "66:376:0:-:0;;;;;;;;;;;;;;;;;;;", deployedSourceMap: "66:376:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;94:20;;;;;;;;;160:25:2;;;148:2;133:18;94:20:0;;;;;;;268:43;;;:::i;:::-;;158:68;194:7;216:5;158:68;;353:87;;;:::i;268:43::-;305:1;296:5;;:10;;;;;;;:::i;:::-;;;;-1:-1:-1;;268:43:0:o;353:87::-;434:1;425:5;;:10;;;;;;;:::i;196:127:2:-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:128;368:3;399:1;395:6;392:1;389:13;386:39;;;405:18;;:::i;:::-;-1:-1:-1;441:9:2;;328:128::o;461:125::-;501:4;529:1;526;523:8;520:34;;;534:18;;:::i;:::-;-1:-1:-1;571:9:2;;461:125::o", ast: { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", exportedSymbols: { MyBaseContract: [28] }, id: 29, license: "MIT", nodeType: "SourceUnit", nodes: [{ id: 1, literals: ["solidity", ">=", "0.4", ".22", "<", "0.9", ".0"], nodeType: "PragmaDirective", src: "32:32:0" }, { abstract: false, baseContracts: [], canonicalName: "MyBaseContract", contractDependencies: [], contractKind: "contract", fullyImplemented: true, id: 28, linearizedBaseContracts: [28], name: "MyBaseContract", nameLocation: "75:14:0", nodeType: "ContractDefinition", nodes: [{ constant: false, functionSelector: "06661abd", id: 3, mutability: "mutable", name: "count", nameLocation: "109:5:0", nodeType: "VariableDeclaration", scope: 28, src: "94:20:0", stateVariable: true, storageLocation: "default", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" }, typeName: { id: 2, name: "uint256", nodeType: "ElementaryTypeName", src: "94:7:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, visibility: "public" }, { body: { id: 10, nodeType: "Block", src: "203:23:0", statements: [{ expression: { id: 8, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "216:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, functionReturnParameters: 7, id: 9, nodeType: "Return", src: "209:12:0" }] }, functionSelector: "6d4ce63c", id: 11, implemented: true, kind: "function", modifiers: [], name: "get", nameLocation: "167:3:0", nodeType: "FunctionDefinition", parameters: { id: 4, nodeType: "ParameterList", parameters: [], src: "170:2:0" }, returnParameters: { id: 7, nodeType: "ParameterList", parameters: [{ constant: false, id: 6, mutability: "mutable", name: "", nameLocation: "-1:-1:-1", nodeType: "VariableDeclaration", scope: 11, src: "194:7:0", stateVariable: false, storageLocation: "default", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" }, typeName: { id: 5, name: "uint256", nodeType: "ElementaryTypeName", src: "194:7:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, visibility: "internal" }], src: "193:9:0" }, scope: 28, src: "158:68:0", stateMutability: "view", virtual: false, visibility: "public" }, { body: { id: 18, nodeType: "Block", src: "290:21:0", statements: [{ expression: { id: 16, isConstant: false, isLValue: false, isPure: false, lValueRequested: false, leftHandSide: { id: 14, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "296:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, nodeType: "Assignment", operator: "+=", rightHandSide: { hexValue: "31", id: 15, isConstant: false, isLValue: false, isPure: true, kind: "number", lValueRequested: false, nodeType: "Literal", src: "305:1:0", typeDescriptions: { typeIdentifier: "t_rational_1_by_1", typeString: "int_const 1" }, value: "1" }, src: "296:10:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, id: 17, nodeType: "ExpressionStatement", src: "296:10:0" }] }, functionSelector: "371303c0", id: 19, implemented: true, kind: "function", modifiers: [], name: "inc", nameLocation: "277:3:0", nodeType: "FunctionDefinition", parameters: { id: 12, nodeType: "ParameterList", parameters: [], src: "280:2:0" }, returnParameters: { id: 13, nodeType: "ParameterList", parameters: [], src: "290:0:0" }, scope: 28, src: "268:43:0", stateMutability: "nonpayable", virtual: false, visibility: "public" }, { body: { id: 26, nodeType: "Block", src: "375:65:0", statements: [{ expression: { id: 24, isConstant: false, isLValue: false, isPure: false, lValueRequested: false, leftHandSide: { id: 22, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "425:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, nodeType: "Assignment", operator: "-=", rightHandSide: { hexValue: "31", id: 23, isConstant: false, isLValue: false, isPure: true, kind: "number", lValueRequested: false, nodeType: "Literal", src: "434:1:0", typeDescriptions: { typeIdentifier: "t_rational_1_by_1", typeString: "int_const 1" }, value: "1" }, src: "425:10:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, id: 25, nodeType: "ExpressionStatement", src: "425:10:0" }] }, functionSelector: "b3bcfa82", id: 27, implemented: true, kind: "function", modifiers: [], name: "dec", nameLocation: "362:3:0", nodeType: "FunctionDefinition", parameters: { id: 20, nodeType: "ParameterList", parameters: [], src: "365:2:0" }, returnParameters: { id: 21, nodeType: "ParameterList", parameters: [], src: "375:0:0" }, scope: 28, src: "353:87:0", stateMutability: "nonpayable", virtual: false, visibility: "public" }], scope: 29, src: "66:376:0", usedErrors: [] }], src: "32:411:0" }, bytecode: { linkReferences: [], bytes: "608060405234801561001057600080fd5b50610116806100206000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060b7565b9091555050565b6001600080828254608a919060cc565b634e487b7160e01b600052601160045260246000fd5b6000821982111560c75760c760a1565b500190565b60008282101560db5760db60a1565b50039056fea26469706673582212207e9456b411a1bc0941353d0f97b7cc4c166658d5430abd811dc5b6041624c1c764736f6c634300080e0033" }, deployedBytecode: { linkReferences: [], bytes: "6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060b7565b9091555050565b6001600080828254608a919060cc565b634e487b7160e01b600052601160045260246000fd5b6000821982111560c75760c760a1565b500190565b60008282101560db5760db60a1565b50039056fea26469706673582212207e9456b411a1bc0941353d0f97b7cc4c166658d5430abd811dc5b6041624c1c764736f6c634300080e0033" }, immutableReferences: {}, generatedSources: [], deployedGeneratedSources: [{ ast: { nodeType: "YulBlock", src: "0:588:2", statements: [{ nodeType: "YulBlock", src: "6:3:2", statements: [] }, { body: { nodeType: "YulBlock", src: "115:76:2", statements: [{ nodeType: "YulAssignment", src: "125:26:2", value: { arguments: [{ name: "headStart", nodeType: "YulIdentifier", src: "137:9:2" }, { kind: "number", nodeType: "YulLiteral", src: "148:2:2", type: "", value: "32" }], functionName: { name: "add", nodeType: "YulIdentifier", src: "133:3:2" }, nodeType: "YulFunctionCall", src: "133:18:2" }, variableNames: [{ name: "tail", nodeType: "YulIdentifier", src: "125:4:2" }] }, { expression: { arguments: [{ name: "headStart", nodeType: "YulIdentifier", src: "167:9:2" }, { name: "value0", nodeType: "YulIdentifier", src: "178:6:2" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "160:6:2" }, nodeType: "YulFunctionCall", src: "160:25:2" }, nodeType: "YulExpressionStatement", src: "160:25:2" }] }, name: "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed", nodeType: "YulFunctionDefinition", parameters: [{ name: "headStart", nodeType: "YulTypedName", src: "84:9:2", type: "" }, { name: "value0", nodeType: "YulTypedName", src: "95:6:2", type: "" }], returnVariables: [{ name: "tail", nodeType: "YulTypedName", src: "106:4:2", type: "" }], src: "14:177:2" }, { body: { nodeType: "YulBlock", src: "228:95:2", statements: [{ expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "245:1:2", type: "", value: "0" }, { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "252:3:2", type: "", value: "224" }, { kind: "number", nodeType: "YulLiteral", src: "257:10:2", type: "", value: "0x4e487b71" }], functionName: { name: "shl", nodeType: "YulIdentifier", src: "248:3:2" }, nodeType: "YulFunctionCall", src: "248:20:2" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "238:6:2" }, nodeType: "YulFunctionCall", src: "238:31:2" }, nodeType: "YulExpressionStatement", src: "238:31:2" }, { expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "285:1:2", type: "", value: "4" }, { kind: "number", nodeType: "YulLiteral", src: "288:4:2", type: "", value: "0x11" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "278:6:2" }, nodeType: "YulFunctionCall", src: "278:15:2" }, nodeType: "YulExpressionStatement", src: "278:15:2" }, { expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "309:1:2", type: "", value: "0" }, { kind: "number", nodeType: "YulLiteral", src: "312:4:2", type: "", value: "0x24" }], functionName: { name: "revert", nodeType: "YulIdentifier", src: "302:6:2" }, nodeType: "YulFunctionCall", src: "302:15:2" }, nodeType: "YulExpressionStatement", src: "302:15:2" }] }, name: "panic_error_0x11", nodeType: "YulFunctionDefinition", src: "196:127:2" }, { body: { nodeType: "YulBlock", src: "376:80:2", statements: [{ body: { nodeType: "YulBlock", src: "403:22:2", statements: [{ expression: { arguments: [], functionName: { name: "panic_error_0x11", nodeType: "YulIdentifier", src: "405:16:2" }, nodeType: "YulFunctionCall", src: "405:18:2" }, nodeType: "YulExpressionStatement", src: "405:18:2" }] }, condition: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "392:1:2" }, { arguments: [{ name: "y", nodeType: "YulIdentifier", src: "399:1:2" }], functionName: { name: "not", nodeType: "YulIdentifier", src: "395:3:2" }, nodeType: "YulFunctionCall", src: "395:6:2" }], functionName: { name: "gt", nodeType: "YulIdentifier", src: "389:2:2" }, nodeType: "YulFunctionCall", src: "389:13:2" }, nodeType: "YulIf", src: "386:39:2" }, { nodeType: "YulAssignment", src: "434:16:2", value: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "445:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "448:1:2" }], functionName: { name: "add", nodeType: "YulIdentifier", src: "441:3:2" }, nodeType: "YulFunctionCall", src: "441:9:2" }, variableNames: [{ name: "sum", nodeType: "YulIdentifier", src: "434:3:2" }] }] }, name: "checked_add_t_uint256", nodeType: "YulFunctionDefinition", parameters: [{ name: "x", nodeType: "YulTypedName", src: "359:1:2", type: "" }, { name: "y", nodeType: "YulTypedName", src: "362:1:2", type: "" }], returnVariables: [{ name: "sum", nodeType: "YulTypedName", src: "368:3:2", type: "" }], src: "328:128:2" }, { body: { nodeType: "YulBlock", src: "510:76:2", statements: [{ body: { nodeType: "YulBlock", src: "532:22:2", statements: [{ expression: { arguments: [], functionName: { name: "panic_error_0x11", nodeType: "YulIdentifier", src: "534:16:2" }, nodeType: "YulFunctionCall", src: "534:18:2" }, nodeType: "YulExpressionStatement", src: "534:18:2" }] }, condition: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "526:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "529:1:2" }], functionName: { name: "lt", nodeType: "YulIdentifier", src: "523:2:2" }, nodeType: "YulFunctionCall", src: "523:8:2" }, nodeType: "YulIf", src: "520:34:2" }, { nodeType: "YulAssignment", src: "563:17:2", value: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "575:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "578:1:2" }], functionName: { name: "sub", nodeType: "YulIdentifier", src: "571:3:2" }, nodeType: "YulFunctionCall", src: "571:9:2" }, variableNames: [{ name: "diff", nodeType: "YulIdentifier", src: "563:4:2" }] }] }, name: "checked_sub_t_uint256", nodeType: "YulFunctionDefinition", parameters: [{ name: "x", nodeType: "YulTypedName", src: "492:1:2", type: "" }, { name: "y", nodeType: "YulTypedName", src: "495:1:2", type: "" }], returnVariables: [{ name: "diff", nodeType: "YulTypedName", src: "501:4:2", type: "" }], src: "461:125:2" }] }, contents: "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n}", id: 2, language: "Yul", name: "#utility.yul" }], compiler: { name: "solc", version: "0.8.14+commit.80d49f37.Emscripten.clang" } }, { contractName: "MyFirstContract", abi: [{ inputs: [], name: "count", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "dec", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "get", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "inc", outputs: [], stateMutability: "nonpayable", type: "function" }], metadata: '{"compiler":{"version":"0.8.14+commit.80d49f37"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dec","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"get","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inc","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol":"MyFirstContract"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol":{"keccak256":"0x2c9989f9cfb2684e68d41ffaa356340d76e93faaec230354b4ed74fae7431b29","license":"MIT","urls":["bzz-raw://8aae1d9dc24cce12f4b416d0fd1bc69026e5d991e005a5a8c2bba49ab912b0be","dweb:/ipfs/QmUnWMyzS4QQvhu3849LSb1tQuYq6SgkkviL3AWppjcj93"]},"Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol":{"keccak256":"0xa0f63778d3575957af69f67b045824d6f6fbd605c87285b46cefdff1f82f967e","license":"MIT","urls":["bzz-raw://3f044eaa9d7841b5963e17b3e21755c2f2a4ff38ed4c1be1b8fab44f073b5274","dweb:/ipfs/QmPoLQPBGZUE27KW2pQLCFGWEiY8Y1odP36Fra6odajVHi"]}},"version":1}', devdoc: { kind: "dev", methods: {}, version: 1 }, userdoc: { kind: "user", methods: {}, version: 1 }, sourcePath: "/Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol", source: '// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport "./MyBaseContract.sol";\n\ncontract MyFirstContract is MyBaseContract {}\n', sourceMap: "98:45:1:-:0;;;;;;;;;;;;;;;;;;;", deployedSourceMap: "98:45:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;94:20:0;;;;;;;;;160:25:2;;;148:2;133:18;94:20:0;;;;;;;268:43;;;:::i;:::-;;158:68;194:7;216:5;158:68;;353:87;;;:::i;268:43::-;305:1;296:5;;:10;;;;;;;:::i;:::-;;;;-1:-1:-1;;268:43:0:o;353:87::-;434:1;425:5;;:10;;;;;;;:::i;196:127:2:-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:128;368:3;399:1;395:6;392:1;389:13;386:39;;;405:18;;:::i;:::-;-1:-1:-1;441:9:2;;328:128::o;461:125::-;501:4;529:1;526;523:8;520:34;;;534:18;;:::i;:::-;-1:-1:-1;571:9:2;;461:125::o", ast: { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol", exportedSymbols: { MyBaseContract: [28], MyFirstContract: [34] }, id: 35, license: "MIT", nodeType: "SourceUnit", nodes: [{ id: 30, literals: ["solidity", ">=", "0.4", ".22", "<", "0.9", ".0"], nodeType: "PragmaDirective", src: "32:32:1" }, { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", file: "./MyBaseContract.sol", id: 31, nameLocation: "-1:-1:-1", nodeType: "ImportDirective", scope: 35, sourceUnit: 29, src: "66:30:1", symbolAliases: [], unitAlias: "" }, { abstract: false, baseContracts: [{ baseName: { id: 32, name: "MyBaseContract", nodeType: "IdentifierPath", referencedDeclaration: 28, src: "126:14:1" }, id: 33, nodeType: "InheritanceSpecifier", src: "126:14:1" }], canonicalName: "MyFirstContract", contractDependencies: [], contractKind: "contract", fullyImplemented: true, id: 34, linearizedBaseContracts: [34, 28], name: "MyFirstContract", nameLocation: "107:15:1", nodeType: "ContractDefinition", nodes: [], scope: 35, src: "98:45:1", usedErrors: [] }], src: "32:112:1" }, bytecode: { linkReferences: [], bytes: "608060405234801561001057600080fd5b50610116806100206000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060b7565b9091555050565b6001600080828254608a919060cc565b634e487b7160e01b600052601160045260246000fd5b6000821982111560c75760c760a1565b500190565b60008282101560db5760db60a1565b50039056fea264697066735822122039990958c6053b788bb983d4759ef31f0f407b049c7ff1ee252f552c18d1a01b64736f6c634300080e0033" }, deployedBytecode: { linkReferences: [], bytes: "6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060b7565b9091555050565b6001600080828254608a919060cc565b634e487b7160e01b600052601160045260246000fd5b6000821982111560c75760c760a1565b500190565b60008282101560db5760db60a1565b50039056fea264697066735822122039990958c6053b788bb983d4759ef31f0f407b049c7ff1ee252f552c18d1a01b64736f6c634300080e0033" }, immutableReferences: {}, generatedSources: [], deployedGeneratedSources: [{ ast: { nodeType: "YulBlock", src: "0:588:2", statements: [{ nodeType: "YulBlock", src: "6:3:2", statements: [] }, { body: { nodeType: "YulBlock", src: "115:76:2", statements: [{ nodeType: "YulAssignment", src: "125:26:2", value: { arguments: [{ name: "headStart", nodeType: "YulIdentifier", src: "137:9:2" }, { kind: "number", nodeType: "YulLiteral", src: "148:2:2", type: "", value: "32" }], functionName: { name: "add", nodeType: "YulIdentifier", src: "133:3:2" }, nodeType: "YulFunctionCall", src: "133:18:2" }, variableNames: [{ name: "tail", nodeType: "YulIdentifier", src: "125:4:2" }] }, { expression: { arguments: [{ name: "headStart", nodeType: "YulIdentifier", src: "167:9:2" }, { name: "value0", nodeType: "YulIdentifier", src: "178:6:2" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "160:6:2" }, nodeType: "YulFunctionCall", src: "160:25:2" }, nodeType: "YulExpressionStatement", src: "160:25:2" }] }, name: "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed", nodeType: "YulFunctionDefinition", parameters: [{ name: "headStart", nodeType: "YulTypedName", src: "84:9:2", type: "" }, { name: "value0", nodeType: "YulTypedName", src: "95:6:2", type: "" }], returnVariables: [{ name: "tail", nodeType: "YulTypedName", src: "106:4:2", type: "" }], src: "14:177:2" }, { body: { nodeType: "YulBlock", src: "228:95:2", statements: [{ expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "245:1:2", type: "", value: "0" }, { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "252:3:2", type: "", value: "224" }, { kind: "number", nodeType: "YulLiteral", src: "257:10:2", type: "", value: "0x4e487b71" }], functionName: { name: "shl", nodeType: "YulIdentifier", src: "248:3:2" }, nodeType: "YulFunctionCall", src: "248:20:2" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "238:6:2" }, nodeType: "YulFunctionCall", src: "238:31:2" }, nodeType: "YulExpressionStatement", src: "238:31:2" }, { expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "285:1:2", type: "", value: "4" }, { kind: "number", nodeType: "YulLiteral", src: "288:4:2", type: "", value: "0x11" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "278:6:2" }, nodeType: "YulFunctionCall", src: "278:15:2" }, nodeType: "YulExpressionStatement", src: "278:15:2" }, { expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "309:1:2", type: "", value: "0" }, { kind: "number", nodeType: "YulLiteral", src: "312:4:2", type: "", value: "0x24" }], functionName: { name: "revert", nodeType: "YulIdentifier", src: "302:6:2" }, nodeType: "YulFunctionCall", src: "302:15:2" }, nodeType: "YulExpressionStatement", src: "302:15:2" }] }, name: "panic_error_0x11", nodeType: "YulFunctionDefinition", src: "196:127:2" }, { body: { nodeType: "YulBlock", src: "376:80:2", statements: [{ body: { nodeType: "YulBlock", src: "403:22:2", statements: [{ expression: { arguments: [], functionName: { name: "panic_error_0x11", nodeType: "YulIdentifier", src: "405:16:2" }, nodeType: "YulFunctionCall", src: "405:18:2" }, nodeType: "YulExpressionStatement", src: "405:18:2" }] }, condition: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "392:1:2" }, { arguments: [{ name: "y", nodeType: "YulIdentifier", src: "399:1:2" }], functionName: { name: "not", nodeType: "YulIdentifier", src: "395:3:2" }, nodeType: "YulFunctionCall", src: "395:6:2" }], functionName: { name: "gt", nodeType: "YulIdentifier", src: "389:2:2" }, nodeType: "YulFunctionCall", src: "389:13:2" }, nodeType: "YulIf", src: "386:39:2" }, { nodeType: "YulAssignment", src: "434:16:2", value: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "445:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "448:1:2" }], functionName: { name: "add", nodeType: "YulIdentifier", src: "441:3:2" }, nodeType: "YulFunctionCall", src: "441:9:2" }, variableNames: [{ name: "sum", nodeType: "YulIdentifier", src: "434:3:2" }] }] }, name: "checked_add_t_uint256", nodeType: "YulFunctionDefinition", parameters: [{ name: "x", nodeType: "YulTypedName", src: "359:1:2", type: "" }, { name: "y", nodeType: "YulTypedName", src: "362:1:2", type: "" }], returnVariables: [{ name: "sum", nodeType: "YulTypedName", src: "368:3:2", type: "" }], src: "328:128:2" }, { body: { nodeType: "YulBlock", src: "510:76:2", statements: [{ body: { nodeType: "YulBlock", src: "532:22:2", statements: [{ expression: { arguments: [], functionName: { name: "panic_error_0x11", nodeType: "YulIdentifier", src: "534:16:2" }, nodeType: "YulFunctionCall", src: "534:18:2" }, nodeType: "YulExpressionStatement", src: "534:18:2" }] }, condition: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "526:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "529:1:2" }], functionName: { name: "lt", nodeType: "YulIdentifier", src: "523:2:2" }, nodeType: "YulFunctionCall", src: "523:8:2" }, nodeType: "YulIf", src: "520:34:2" }, { nodeType: "YulAssignment", src: "563:17:2", value: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "575:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "578:1:2" }], functionName: { name: "sub", nodeType: "YulIdentifier", src: "571:3:2" }, nodeType: "YulFunctionCall", src: "571:9:2" }, variableNames: [{ name: "diff", nodeType: "YulIdentifier", src: "563:4:2" }] }] }, name: "checked_sub_t_uint256", nodeType: "YulFunctionDefinition", parameters: [{ name: "x", nodeType: "YulTypedName", src: "492:1:2", type: "" }, { name: "y", nodeType: "YulTypedName", src: "495:1:2", type: "" }], returnVariables: [{ name: "diff", nodeType: "YulTypedName", src: "501:4:2", type: "" }], src: "461:125:2" }] }, contents: "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n}", id: 2, language: "Yul", name: "#utility.yul" }], compiler: { name: "solc", version: "0.8.14+commit.80d49f37.Emscripten.clang" } }], sources: [{ sourcePath: "/Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", contents: "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract MyBaseContract {\n  uint256 public count;\n\n  // Function to get the current count\n  function get() public view returns (uint256) {\n    return count;\n  }\n\n  // Function to increment count by 1\n  function inc() public {\n    count += 1;\n  }\n\n  // Function to decrement count by 1\n  function dec() public {\n    // This function will fail if count = 0\n    count -= 1;\n  }\n}\n", ast: { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", exportedSymbols: { MyBaseContract: [28] }, id: 29, license: "MIT", nodeType: "SourceUnit", nodes: [{ id: 1, literals: ["solidity", ">=", "0.4", ".22", "<", "0.9", ".0"], nodeType: "PragmaDirective", src: "32:32:0" }, { abstract: false, baseContracts: [], canonicalName: "MyBaseContract", contractDependencies: [], contractKind: "contract", fullyImplemented: true, id: 28, linearizedBaseContracts: [28], name: "MyBaseContract", nameLocation: "75:14:0", nodeType: "ContractDefinition", nodes: [{ constant: false, functionSelector: "06661abd", id: 3, mutability: "mutable", name: "count", nameLocation: "109:5:0", nodeType: "VariableDeclaration", scope: 28, src: "94:20:0", stateVariable: true, storageLocation: "default", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" }, typeName: { id: 2, name: "uint256", nodeType: "ElementaryTypeName", src: "94:7:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, visibility: "public" }, { body: { id: 10, nodeType: "Block", src: "203:23:0", statements: [{ expression: { id: 8, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "216:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, functionReturnParameters: 7, id: 9, nodeType: "Return", src: "209:12:0" }] }, functionSelector: "6d4ce63c", id: 11, implemented: true, kind: "function", modifiers: [], name: "get", nameLocation: "167:3:0", nodeType: "FunctionDefinition", parameters: { id: 4, nodeType: "ParameterList", parameters: [], src: "170:2:0" }, returnParameters: { id: 7, nodeType: "ParameterList", parameters: [{ constant: false, id: 6, mutability: "mutable", name: "", nameLocation: "-1:-1:-1", nodeType: "VariableDeclaration", scope: 11, src: "194:7:0", stateVariable: false, storageLocation: "default", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" }, typeName: { id: 5, name: "uint256", nodeType: "ElementaryTypeName", src: "194:7:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, visibility: "internal" }], src: "193:9:0" }, scope: 28, src: "158:68:0", stateMutability: "view", virtual: false, visibility: "public" }, { body: { id: 18, nodeType: "Block", src: "290:21:0", statements: [{ expression: { id: 16, isConstant: false, isLValue: false, isPure: false, lValueRequested: false, leftHandSide: { id: 14, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "296:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, nodeType: "Assignment", operator: "+=", rightHandSide: { hexValue: "31", id: 15, isConstant: false, isLValue: false, isPure: true, kind: "number", lValueRequested: false, nodeType: "Literal", src: "305:1:0", typeDescriptions: { typeIdentifier: "t_rational_1_by_1", typeString: "int_const 1" }, value: "1" }, src: "296:10:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, id: 17, nodeType: "ExpressionStatement", src: "296:10:0" }] }, functionSelector: "371303c0", id: 19, implemented: true, kind: "function", modifiers: [], name: "inc", nameLocation: "277:3:0", nodeType: "FunctionDefinition", parameters: { id: 12, nodeType: "ParameterList", parameters: [], src: "280:2:0" }, returnParameters: { id: 13, nodeType: "ParameterList", parameters: [], src: "290:0:0" }, scope: 28, src: "268:43:0", stateMutability: "nonpayable", virtual: false, visibility: "public" }, { body: { id: 26, nodeType: "Block", src: "375:65:0", statements: [{ expression: { id: 24, isConstant: false, isLValue: false, isPure: false, lValueRequested: false, leftHandSide: { id: 22, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "425:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, nodeType: "Assignment", operator: "-=", rightHandSide: { hexValue: "31", id: 23, isConstant: false, isLValue: false, isPure: true, kind: "number", lValueRequested: false, nodeType: "Literal", src: "434:1:0", typeDescriptions: { typeIdentifier: "t_rational_1_by_1", typeString: "int_const 1" }, value: "1" }, src: "425:10:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, id: 25, nodeType: "ExpressionStatement", src: "425:10:0" }] }, functionSelector: "b3bcfa82", id: 27, implemented: true, kind: "function", modifiers: [], name: "dec", nameLocation: "362:3:0", nodeType: "FunctionDefinition", parameters: { id: 20, nodeType: "ParameterList", parameters: [], src: "365:2:0" }, returnParameters: { id: 21, nodeType: "ParameterList", parameters: [], src: "375:0:0" }, scope: 28, src: "353:87:0", stateMutability: "nonpayable", virtual: false, visibility: "public" }], scope: 29, src: "66:376:0", usedErrors: [] }], src: "32:411:0" }, language: "Solidity" }, { sourcePath: "/Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol", contents: '// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport "./MyBaseContract.sol";\n\ncontract MyFirstContract is MyBaseContract {}\n', ast: { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol", exportedSymbols: { MyBaseContract: [28], MyFirstContract: [34] }, id: 35, license: "MIT", nodeType: "SourceUnit", nodes: [{ id: 30, literals: ["solidity", ">=", "0.4", ".22", "<", "0.9", ".0"], nodeType: "PragmaDirective", src: "32:32:1" }, { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", file: "./MyBaseContract.sol", id: 31, nameLocation: "-1:-1:-1", nodeType: "ImportDirective", scope: 35, sourceUnit: 29, src: "66:30:1", symbolAliases: [], unitAlias: "" }, { abstract: false, baseContracts: [{ baseName: { id: 32, name: "MyBaseContract", nodeType: "IdentifierPath", referencedDeclaration: 28, src: "126:14:1" }, id: 33, nodeType: "InheritanceSpecifier", src: "126:14:1" }], canonicalName: "MyFirstContract", contractDependencies: [], contractKind: "contract", fullyImplemented: true, id: 34, linearizedBaseContracts: [34, 28], name: "MyFirstContract", nameLocation: "107:15:1", nodeType: "ContractDefinition", nodes: [], scope: 35, src: "98:45:1", usedErrors: [] }], src: "32:112:1" }, language: "Solidity" }], compiler: { name: "solc", version: "0.8.14+commit.80d49f37.Emscripten.clang" } }], contracts: [{ contractName: "MyBaseContract", abi: [{ inputs: [], name: "count", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "get", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "inc", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "dec", outputs: [], stateMutability: "nonpayable", type: "function" }], metadata: '{"compiler":{"version":"0.8.14+commit.80d49f37"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dec","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"get","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inc","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol":"MyBaseContract"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol":{"keccak256":"0x2c9989f9cfb2684e68d41ffaa356340d76e93faaec230354b4ed74fae7431b29","license":"MIT","urls":["bzz-raw://8aae1d9dc24cce12f4b416d0fd1bc69026e5d991e005a5a8c2bba49ab912b0be","dweb:/ipfs/QmUnWMyzS4QQvhu3849LSb1tQuYq6SgkkviL3AWppjcj93"]}},"version":1}', devdoc: { kind: "dev", methods: {}, version: 1 }, userdoc: { kind: "user", methods: {}, version: 1 }, sourcePath: "/Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", source: "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract MyBaseContract {\n  uint256 public count;\n\n  // Function to get the current count\n  function get() public view returns (uint256) {\n    return count;\n  }\n\n  // Function to increment count by 1\n  function inc() public {\n    count += 1;\n  }\n\n  // Function to decrement count by 1\n  function dec() public {\n    // This function will fail if count = 0\n    count -= 1;\n  }\n}\n", sourceMap: "66:376:0:-:0;;;;;;;;;;;;;;;;;;;", deployedSourceMap: "66:376:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;94:20;;;;;;;;;160:25:2;;;148:2;133:18;94:20:0;;;;;;;268:43;;;:::i;:::-;;158:68;194:7;216:5;158:68;;353:87;;;:::i;268:43::-;305:1;296:5;;:10;;;;;;;:::i;:::-;;;;-1:-1:-1;;268:43:0:o;353:87::-;434:1;425:5;;:10;;;;;;;:::i;196:127:2:-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:128;368:3;399:1;395:6;392:1;389:13;386:39;;;405:18;;:::i;:::-;-1:-1:-1;441:9:2;;328:128::o;461:125::-;501:4;529:1;526;523:8;520:34;;;534:18;;:::i;:::-;-1:-1:-1;571:9:2;;461:125::o", ast: { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", exportedSymbols: { MyBaseContract: [28] }, id: 29, license: "MIT", nodeType: "SourceUnit", nodes: [{ id: 1, literals: ["solidity", ">=", "0.4", ".22", "<", "0.9", ".0"], nodeType: "PragmaDirective", src: "32:32:0" }, { abstract: false, baseContracts: [], canonicalName: "MyBaseContract", contractDependencies: [], contractKind: "contract", fullyImplemented: true, id: 28, linearizedBaseContracts: [28], name: "MyBaseContract", nameLocation: "75:14:0", nodeType: "ContractDefinition", nodes: [{ constant: false, functionSelector: "06661abd", id: 3, mutability: "mutable", name: "count", nameLocation: "109:5:0", nodeType: "VariableDeclaration", scope: 28, src: "94:20:0", stateVariable: true, storageLocation: "default", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" }, typeName: { id: 2, name: "uint256", nodeType: "ElementaryTypeName", src: "94:7:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, visibility: "public" }, { body: { id: 10, nodeType: "Block", src: "203:23:0", statements: [{ expression: { id: 8, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "216:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, functionReturnParameters: 7, id: 9, nodeType: "Return", src: "209:12:0" }] }, functionSelector: "6d4ce63c", id: 11, implemented: true, kind: "function", modifiers: [], name: "get", nameLocation: "167:3:0", nodeType: "FunctionDefinition", parameters: { id: 4, nodeType: "ParameterList", parameters: [], src: "170:2:0" }, returnParameters: { id: 7, nodeType: "ParameterList", parameters: [{ constant: false, id: 6, mutability: "mutable", name: "", nameLocation: "-1:-1:-1", nodeType: "VariableDeclaration", scope: 11, src: "194:7:0", stateVariable: false, storageLocation: "default", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" }, typeName: { id: 5, name: "uint256", nodeType: "ElementaryTypeName", src: "194:7:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, visibility: "internal" }], src: "193:9:0" }, scope: 28, src: "158:68:0", stateMutability: "view", virtual: false, visibility: "public" }, { body: { id: 18, nodeType: "Block", src: "290:21:0", statements: [{ expression: { id: 16, isConstant: false, isLValue: false, isPure: false, lValueRequested: false, leftHandSide: { id: 14, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "296:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, nodeType: "Assignment", operator: "+=", rightHandSide: { hexValue: "31", id: 15, isConstant: false, isLValue: false, isPure: true, kind: "number", lValueRequested: false, nodeType: "Literal", src: "305:1:0", typeDescriptions: { typeIdentifier: "t_rational_1_by_1", typeString: "int_const 1" }, value: "1" }, src: "296:10:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, id: 17, nodeType: "ExpressionStatement", src: "296:10:0" }] }, functionSelector: "371303c0", id: 19, implemented: true, kind: "function", modifiers: [], name: "inc", nameLocation: "277:3:0", nodeType: "FunctionDefinition", parameters: { id: 12, nodeType: "ParameterList", parameters: [], src: "280:2:0" }, returnParameters: { id: 13, nodeType: "ParameterList", parameters: [], src: "290:0:0" }, scope: 28, src: "268:43:0", stateMutability: "nonpayable", virtual: false, visibility: "public" }, { body: { id: 26, nodeType: "Block", src: "375:65:0", statements: [{ expression: { id: 24, isConstant: false, isLValue: false, isPure: false, lValueRequested: false, leftHandSide: { id: 22, name: "count", nodeType: "Identifier", overloadedDeclarations: [], referencedDeclaration: 3, src: "425:5:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, nodeType: "Assignment", operator: "-=", rightHandSide: { hexValue: "31", id: 23, isConstant: false, isLValue: false, isPure: true, kind: "number", lValueRequested: false, nodeType: "Literal", src: "434:1:0", typeDescriptions: { typeIdentifier: "t_rational_1_by_1", typeString: "int_const 1" }, value: "1" }, src: "425:10:0", typeDescriptions: { typeIdentifier: "t_uint256", typeString: "uint256" } }, id: 25, nodeType: "ExpressionStatement", src: "425:10:0" }] }, functionSelector: "b3bcfa82", id: 27, implemented: true, kind: "function", modifiers: [], name: "dec", nameLocation: "362:3:0", nodeType: "FunctionDefinition", parameters: { id: 20, nodeType: "ParameterList", parameters: [], src: "365:2:0" }, returnParameters: { id: 21, nodeType: "ParameterList", parameters: [], src: "375:0:0" }, scope: 28, src: "353:87:0", stateMutability: "nonpayable", virtual: false, visibility: "public" }], scope: 29, src: "66:376:0", usedErrors: [] }], src: "32:411:0" }, bytecode: { linkReferences: [], bytes: "608060405234801561001057600080fd5b50610116806100206000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060b7565b9091555050565b6001600080828254608a919060cc565b634e487b7160e01b600052601160045260246000fd5b6000821982111560c75760c760a1565b500190565b60008282101560db5760db60a1565b50039056fea26469706673582212207e9456b411a1bc0941353d0f97b7cc4c166658d5430abd811dc5b6041624c1c764736f6c634300080e0033" }, deployedBytecode: { linkReferences: [], bytes: "6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060b7565b9091555050565b6001600080828254608a919060cc565b634e487b7160e01b600052601160045260246000fd5b6000821982111560c75760c760a1565b500190565b60008282101560db5760db60a1565b50039056fea26469706673582212207e9456b411a1bc0941353d0f97b7cc4c166658d5430abd811dc5b6041624c1c764736f6c634300080e0033" }, immutableReferences: {}, generatedSources: [], deployedGeneratedSources: [{ ast: { nodeType: "YulBlock", src: "0:588:2", statements: [{ nodeType: "YulBlock", src: "6:3:2", statements: [] }, { body: { nodeType: "YulBlock", src: "115:76:2", statements: [{ nodeType: "YulAssignment", src: "125:26:2", value: { arguments: [{ name: "headStart", nodeType: "YulIdentifier", src: "137:9:2" }, { kind: "number", nodeType: "YulLiteral", src: "148:2:2", type: "", value: "32" }], functionName: { name: "add", nodeType: "YulIdentifier", src: "133:3:2" }, nodeType: "YulFunctionCall", src: "133:18:2" }, variableNames: [{ name: "tail", nodeType: "YulIdentifier", src: "125:4:2" }] }, { expression: { arguments: [{ name: "headStart", nodeType: "YulIdentifier", src: "167:9:2" }, { name: "value0", nodeType: "YulIdentifier", src: "178:6:2" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "160:6:2" }, nodeType: "YulFunctionCall", src: "160:25:2" }, nodeType: "YulExpressionStatement", src: "160:25:2" }] }, name: "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed", nodeType: "YulFunctionDefinition", parameters: [{ name: "headStart", nodeType: "YulTypedName", src: "84:9:2", type: "" }, { name: "value0", nodeType: "YulTypedName", src: "95:6:2", type: "" }], returnVariables: [{ name: "tail", nodeType: "YulTypedName", src: "106:4:2", type: "" }], src: "14:177:2" }, { body: { nodeType: "YulBlock", src: "228:95:2", statements: [{ expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "245:1:2", type: "", value: "0" }, { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "252:3:2", type: "", value: "224" }, { kind: "number", nodeType: "YulLiteral", src: "257:10:2", type: "", value: "0x4e487b71" }], functionName: { name: "shl", nodeType: "YulIdentifier", src: "248:3:2" }, nodeType: "YulFunctionCall", src: "248:20:2" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "238:6:2" }, nodeType: "YulFunctionCall", src: "238:31:2" }, nodeType: "YulExpressionStatement", src: "238:31:2" }, { expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "285:1:2", type: "", value: "4" }, { kind: "number", nodeType: "YulLiteral", src: "288:4:2", type: "", value: "0x11" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "278:6:2" }, nodeType: "YulFunctionCall", src: "278:15:2" }, nodeType: "YulExpressionStatement", src: "278:15:2" }, { expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "309:1:2", type: "", value: "0" }, { kind: "number", nodeType: "YulLiteral", src: "312:4:2", type: "", value: "0x24" }], functionName: { name: "revert", nodeType: "YulIdentifier", src: "302:6:2" }, nodeType: "YulFunctionCall", src: "302:15:2" }, nodeType: "YulExpressionStatement", src: "302:15:2" }] }, name: "panic_error_0x11", nodeType: "YulFunctionDefinition", src: "196:127:2" }, { body: { nodeType: "YulBlock", src: "376:80:2", statements: [{ body: { nodeType: "YulBlock", src: "403:22:2", statements: [{ expression: { arguments: [], functionName: { name: "panic_error_0x11", nodeType: "YulIdentifier", src: "405:16:2" }, nodeType: "YulFunctionCall", src: "405:18:2" }, nodeType: "YulExpressionStatement", src: "405:18:2" }] }, condition: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "392:1:2" }, { arguments: [{ name: "y", nodeType: "YulIdentifier", src: "399:1:2" }], functionName: { name: "not", nodeType: "YulIdentifier", src: "395:3:2" }, nodeType: "YulFunctionCall", src: "395:6:2" }], functionName: { name: "gt", nodeType: "YulIdentifier", src: "389:2:2" }, nodeType: "YulFunctionCall", src: "389:13:2" }, nodeType: "YulIf", src: "386:39:2" }, { nodeType: "YulAssignment", src: "434:16:2", value: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "445:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "448:1:2" }], functionName: { name: "add", nodeType: "YulIdentifier", src: "441:3:2" }, nodeType: "YulFunctionCall", src: "441:9:2" }, variableNames: [{ name: "sum", nodeType: "YulIdentifier", src: "434:3:2" }] }] }, name: "checked_add_t_uint256", nodeType: "YulFunctionDefinition", parameters: [{ name: "x", nodeType: "YulTypedName", src: "359:1:2", type: "" }, { name: "y", nodeType: "YulTypedName", src: "362:1:2", type: "" }], returnVariables: [{ name: "sum", nodeType: "YulTypedName", src: "368:3:2", type: "" }], src: "328:128:2" }, { body: { nodeType: "YulBlock", src: "510:76:2", statements: [{ body: { nodeType: "YulBlock", src: "532:22:2", statements: [{ expression: { arguments: [], functionName: { name: "panic_error_0x11", nodeType: "YulIdentifier", src: "534:16:2" }, nodeType: "YulFunctionCall", src: "534:18:2" }, nodeType: "YulExpressionStatement", src: "534:18:2" }] }, condition: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "526:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "529:1:2" }], functionName: { name: "lt", nodeType: "YulIdentifier", src: "523:2:2" }, nodeType: "YulFunctionCall", src: "523:8:2" }, nodeType: "YulIf", src: "520:34:2" }, { nodeType: "YulAssignment", src: "563:17:2", value: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "575:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "578:1:2" }], functionName: { name: "sub", nodeType: "YulIdentifier", src: "571:3:2" }, nodeType: "YulFunctionCall", src: "571:9:2" }, variableNames: [{ name: "diff", nodeType: "YulIdentifier", src: "563:4:2" }] }] }, name: "checked_sub_t_uint256", nodeType: "YulFunctionDefinition", parameters: [{ name: "x", nodeType: "YulTypedName", src: "492:1:2", type: "" }, { name: "y", nodeType: "YulTypedName", src: "495:1:2", type: "" }], returnVariables: [{ name: "diff", nodeType: "YulTypedName", src: "501:4:2", type: "" }], src: "461:125:2" }] }, contents: "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n}", id: 2, language: "Yul", name: "#utility.yul" }], compiler: { name: "solc", version: "0.8.14+commit.80d49f37.Emscripten.clang" } }, { contractName: "MyFirstContract", abi: [{ inputs: [], name: "count", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "dec", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "get", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "inc", outputs: [], stateMutability: "nonpayable", type: "function" }], metadata: '{"compiler":{"version":"0.8.14+commit.80d49f37"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dec","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"get","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inc","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol":"MyFirstContract"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol":{"keccak256":"0x2c9989f9cfb2684e68d41ffaa356340d76e93faaec230354b4ed74fae7431b29","license":"MIT","urls":["bzz-raw://8aae1d9dc24cce12f4b416d0fd1bc69026e5d991e005a5a8c2bba49ab912b0be","dweb:/ipfs/QmUnWMyzS4QQvhu3849LSb1tQuYq6SgkkviL3AWppjcj93"]},"Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol":{"keccak256":"0xa0f63778d3575957af69f67b045824d6f6fbd605c87285b46cefdff1f82f967e","license":"MIT","urls":["bzz-raw://3f044eaa9d7841b5963e17b3e21755c2f2a4ff38ed4c1be1b8fab44f073b5274","dweb:/ipfs/QmPoLQPBGZUE27KW2pQLCFGWEiY8Y1odP36Fra6odajVHi"]}},"version":1}', devdoc: { kind: "dev", methods: {}, version: 1 }, userdoc: { kind: "user", methods: {}, version: 1 }, sourcePath: "/Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol", source: '// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport "./MyBaseContract.sol";\n\ncontract MyFirstContract is MyBaseContract {}\n', sourceMap: "98:45:1:-:0;;;;;;;;;;;;;;;;;;;", deployedSourceMap: "98:45:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;94:20:0;;;;;;;;;160:25:2;;;148:2;133:18;94:20:0;;;;;;;268:43;;;:::i;:::-;;158:68;194:7;216:5;158:68;;353:87;;;:::i;268:43::-;305:1;296:5;;:10;;;;;;;:::i;:::-;;;;-1:-1:-1;;268:43:0:o;353:87::-;434:1;425:5;;:10;;;;;;;:::i;196:127:2:-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:128;368:3;399:1;395:6;392:1;389:13;386:39;;;405:18;;:::i;:::-;-1:-1:-1;441:9:2;;328:128::o;461:125::-;501:4;529:1;526;523:8;520:34;;;534:18;;:::i;:::-;-1:-1:-1;571:9:2;;461:125::o", ast: { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyFirstContract.sol", exportedSymbols: { MyBaseContract: [28], MyFirstContract: [34] }, id: 35, license: "MIT", nodeType: "SourceUnit", nodes: [{ id: 30, literals: ["solidity", ">=", "0.4", ".22", "<", "0.9", ".0"], nodeType: "PragmaDirective", src: "32:32:1" }, { absolutePath: "Users/adam/Code/kokomoBay/contracts/MyBaseContract.sol", file: "./MyBaseContract.sol", id: 31, nameLocation: "-1:-1:-1", nodeType: "ImportDirective", scope: 35, sourceUnit: 29, src: "66:30:1", symbolAliases: [], unitAlias: "" }, { abstract: false, baseContracts: [{ baseName: { id: 32, name: "MyBaseContract", nodeType: "IdentifierPath", referencedDeclaration: 28, src: "126:14:1" }, id: 33, nodeType: "InheritanceSpecifier", src: "126:14:1" }], canonicalName: "MyFirstContract", contractDependencies: [], contractKind: "contract", fullyImplemented: true, id: 34, linearizedBaseContracts: [34, 28], name: "MyFirstContract", nameLocation: "107:15:1", nodeType: "ContractDefinition", nodes: [], scope: 35, src: "98:45:1", usedErrors: [] }], src: "32:112:1" }, bytecode: { linkReferences: [], bytes: "608060405234801561001057600080fd5b50610116806100206000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060b7565b9091555050565b6001600080828254608a919060cc565b634e487b7160e01b600052601160045260246000fd5b6000821982111560c75760c760a1565b500190565b60008282101560db5760db60a1565b50039056fea264697066735822122039990958c6053b788bb983d4759ef31f0f407b049c7ff1ee252f552c18d1a01b64736f6c634300080e0033" }, deployedBytecode: { linkReferences: [], bytes: "6080604052348015600f57600080fd5b506004361060465760003560e01c806306661abd14604b578063371303c01460655780636d4ce63c14606d578063b3bcfa82146074575b600080fd5b605360005481565b60405190815260200160405180910390f35b606b607a565b005b6000546053565b606b6091565b6001600080828254608a919060b7565b9091555050565b6001600080828254608a919060cc565b634e487b7160e01b600052601160045260246000fd5b6000821982111560c75760c760a1565b500190565b60008282101560db5760db60a1565b50039056fea264697066735822122039990958c6053b788bb983d4759ef31f0f407b049c7ff1ee252f552c18d1a01b64736f6c634300080e0033" }, immutableReferences: {}, generatedSources: [], deployedGeneratedSources: [{ ast: { nodeType: "YulBlock", src: "0:588:2", statements: [{ nodeType: "YulBlock", src: "6:3:2", statements: [] }, { body: { nodeType: "YulBlock", src: "115:76:2", statements: [{ nodeType: "YulAssignment", src: "125:26:2", value: { arguments: [{ name: "headStart", nodeType: "YulIdentifier", src: "137:9:2" }, { kind: "number", nodeType: "YulLiteral", src: "148:2:2", type: "", value: "32" }], functionName: { name: "add", nodeType: "YulIdentifier", src: "133:3:2" }, nodeType: "YulFunctionCall", src: "133:18:2" }, variableNames: [{ name: "tail", nodeType: "YulIdentifier", src: "125:4:2" }] }, { expression: { arguments: [{ name: "headStart", nodeType: "YulIdentifier", src: "167:9:2" }, { name: "value0", nodeType: "YulIdentifier", src: "178:6:2" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "160:6:2" }, nodeType: "YulFunctionCall", src: "160:25:2" }, nodeType: "YulExpressionStatement", src: "160:25:2" }] }, name: "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed", nodeType: "YulFunctionDefinition", parameters: [{ name: "headStart", nodeType: "YulTypedName", src: "84:9:2", type: "" }, { name: "value0", nodeType: "YulTypedName", src: "95:6:2", type: "" }], returnVariables: [{ name: "tail", nodeType: "YulTypedName", src: "106:4:2", type: "" }], src: "14:177:2" }, { body: { nodeType: "YulBlock", src: "228:95:2", statements: [{ expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "245:1:2", type: "", value: "0" }, { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "252:3:2", type: "", value: "224" }, { kind: "number", nodeType: "YulLiteral", src: "257:10:2", type: "", value: "0x4e487b71" }], functionName: { name: "shl", nodeType: "YulIdentifier", src: "248:3:2" }, nodeType: "YulFunctionCall", src: "248:20:2" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "238:6:2" }, nodeType: "YulFunctionCall", src: "238:31:2" }, nodeType: "YulExpressionStatement", src: "238:31:2" }, { expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "285:1:2", type: "", value: "4" }, { kind: "number", nodeType: "YulLiteral", src: "288:4:2", type: "", value: "0x11" }], functionName: { name: "mstore", nodeType: "YulIdentifier", src: "278:6:2" }, nodeType: "YulFunctionCall", src: "278:15:2" }, nodeType: "YulExpressionStatement", src: "278:15:2" }, { expression: { arguments: [{ kind: "number", nodeType: "YulLiteral", src: "309:1:2", type: "", value: "0" }, { kind: "number", nodeType: "YulLiteral", src: "312:4:2", type: "", value: "0x24" }], functionName: { name: "revert", nodeType: "YulIdentifier", src: "302:6:2" }, nodeType: "YulFunctionCall", src: "302:15:2" }, nodeType: "YulExpressionStatement", src: "302:15:2" }] }, name: "panic_error_0x11", nodeType: "YulFunctionDefinition", src: "196:127:2" }, { body: { nodeType: "YulBlock", src: "376:80:2", statements: [{ body: { nodeType: "YulBlock", src: "403:22:2", statements: [{ expression: { arguments: [], functionName: { name: "panic_error_0x11", nodeType: "YulIdentifier", src: "405:16:2" }, nodeType: "YulFunctionCall", src: "405:18:2" }, nodeType: "YulExpressionStatement", src: "405:18:2" }] }, condition: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "392:1:2" }, { arguments: [{ name: "y", nodeType: "YulIdentifier", src: "399:1:2" }], functionName: { name: "not", nodeType: "YulIdentifier", src: "395:3:2" }, nodeType: "YulFunctionCall", src: "395:6:2" }], functionName: { name: "gt", nodeType: "YulIdentifier", src: "389:2:2" }, nodeType: "YulFunctionCall", src: "389:13:2" }, nodeType: "YulIf", src: "386:39:2" }, { nodeType: "YulAssignment", src: "434:16:2", value: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "445:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "448:1:2" }], functionName: { name: "add", nodeType: "YulIdentifier", src: "441:3:2" }, nodeType: "YulFunctionCall", src: "441:9:2" }, variableNames: [{ name: "sum", nodeType: "YulIdentifier", src: "434:3:2" }] }] }, name: "checked_add_t_uint256", nodeType: "YulFunctionDefinition", parameters: [{ name: "x", nodeType: "YulTypedName", src: "359:1:2", type: "" }, { name: "y", nodeType: "YulTypedName", src: "362:1:2", type: "" }], returnVariables: [{ name: "sum", nodeType: "YulTypedName", src: "368:3:2", type: "" }], src: "328:128:2" }, { body: { nodeType: "YulBlock", src: "510:76:2", statements: [{ body: { nodeType: "YulBlock", src: "532:22:2", statements: [{ expression: { arguments: [], functionName: { name: "panic_error_0x11", nodeType: "YulIdentifier", src: "534:16:2" }, nodeType: "YulFunctionCall", src: "534:18:2" }, nodeType: "YulExpressionStatement", src: "534:18:2" }] }, condition: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "526:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "529:1:2" }], functionName: { name: "lt", nodeType: "YulIdentifier", src: "523:2:2" }, nodeType: "YulFunctionCall", src: "523:8:2" }, nodeType: "YulIf", src: "520:34:2" }, { nodeType: "YulAssignment", src: "563:17:2", value: { arguments: [{ name: "x", nodeType: "YulIdentifier", src: "575:1:2" }, { name: "y", nodeType: "YulIdentifier", src: "578:1:2" }], functionName: { name: "sub", nodeType: "YulIdentifier", src: "571:3:2" }, nodeType: "YulFunctionCall", src: "571:9:2" }, variableNames: [{ name: "diff", nodeType: "YulIdentifier", src: "563:4:2" }] }] }, name: "checked_sub_t_uint256", nodeType: "YulFunctionDefinition", parameters: [{ name: "x", nodeType: "YulTypedName", src: "492:1:2", type: "" }, { name: "y", nodeType: "YulTypedName", src: "495:1:2", type: "" }], returnVariables: [{ name: "diff", nodeType: "YulTypedName", src: "501:4:2", type: "" }], src: "461:125:2" }] }, contents: "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n}", id: 2, language: "Yul", name: "#utility.yul" }], compiler: { name: "solc", version: "0.8.14+commit.80d49f37.Emscripten.clang" } }] };

// myTests/solidity-precompiled.testeranto.test.ts
var SolidityPrecompiledTesteranto = async (testImplementations, testSpecifications, testInput) => {
  const compilation = MyFirstContract_default.contracts.find(
    (c) => c.contractName === testInput[0]
  );
  return (0, import_core_node.default)(
    testInput,
    testSpecifications,
    testImplementations,
    {
      beforeAll: async () => compilation,
      beforeEach: async (contract) => {
        const provider = import_ganache.default.provider();
        const web3 = new import_web3.default(provider);
        const accounts = await web3.eth.getAccounts();
        const argz = await testInput[1](web3);
        const size = Buffer.byteLength(contract.deployedBytecode.bytes, "utf8") / 2;
        console.log("contract size is", size);
        return {
          contract: await new web3.eth.Contract(contract.abi).deploy({
            data: contract.bytecode.bytes,
            arguments: argz
          }).send({ from: accounts[0], gas: 7e6 }),
          accounts,
          provider
        };
      },
      andWhen: async ({ provider, contract, accounts }, callback) => callback()({ contract, accounts })
    },
    { ports: 0 }
  );
};

// src/MyFirstContractGivens.test.ts
var commonGivens = (Given, When, Then, features2) => {
  return {
    "test0": Given.Default(
      [`hello`],
      [],
      [
        Then.Get({ asTestUser: 1, expectation: 0 })
      ],
      "my first contract"
    ),
    "test1": Given.Default(
      [`hello`],
      [
        When.Increment(1),
        When.Increment(1),
        When.Increment(1),
        When.Increment(1)
      ],
      [
        Then.Get({ asTestUser: 1, expectation: 4 })
      ],
      "my first contract"
    ),
    "test2": Given.Default(
      [`hello`],
      [
        When.Increment(1),
        When.Increment(1),
        When.Increment(1),
        When.Increment(1),
        When.Decrement(1)
      ],
      [
        Then.Get({ asTestUser: 1, expectation: 3 })
      ],
      "my first contract"
    )
    // "test3": Given.Default(
    //   [`hello`],
    //   [
    //     When.Decrement(1),
    //     When.Decrement(1),
    //     When.Decrement(1),
    //     When.Increment(1),
    //     When.Increment(1),
    //   ],
    //   [
    //     Then.Get({ asTestUser: 1, expectation: 1.157920892373162e+77 })
    //   ],
    //   "this test should fail"
    // )
  };
};

// src/MyFirstContract.solidity-precompiled.test.ts
var MyFirstContractPrecompiledTesteranto = SolidityPrecompiledTesteranto(
  {
    Suites: {
      Default: "Testing a very simple smart contract"
    },
    Givens: {
      Default: () => {
        return "MyFirstContract.sol";
      }
    },
    Whens: {
      Increment: (asTestUser) => ({ contract, accounts }) => {
        return contract.methods.inc().send({ from: accounts[asTestUser] }).on("receipt", function(x) {
          return x;
        });
      },
      Decrement: (asTestUser) => ({ contract, accounts }) => {
        return new Promise((res) => {
          contract.methods.dec().send({ from: accounts[asTestUser] }).then(function(x) {
            res(x);
          });
        });
      }
    },
    Thens: {
      Get: ({ asTestUser, expectation }) => async ({ contract, accounts }) => import_chai.assert.equal(expectation, parseInt(await contract.methods.get().call()))
    },
    Checks: {
      AnEmptyState: () => "MyFirstContract.sol"
    }
  },
  (Suite, Given, When, Then, Check) => {
    return [
      Suite.Default(
        "Testing a very simple smart contract precompiled?",
        commonGivens(Given, When, Then, features),
        [
          // Check.AnEmptyState(
          //   "imperative style",
          //   [`aloha`],
          //   async ({ TheEmailIsSetTo }, { TheEmailIs }) => {
          //     await TheEmailIsSetTo("foo");
          //     await TheEmailIs("foo");
          //     const reduxPayload = await TheEmailIsSetTo("foobar");
          //     await TheEmailIs("foobar");
          //     // assert.deepEqual(reduxPayload, {
          //     //   type: "login app/setEmail",
          //     //   payload: "foobar",
          //     // });
          //   }
          // ),
        ]
      )
    ];
  },
  ["MyFirstContract", async (web3) => {
    return [];
  }]
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MyFirstContractPrecompiledTesteranto
});
