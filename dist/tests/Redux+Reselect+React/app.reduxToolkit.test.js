import{assert as s}from"chai";import{createStore as c}from"redux";import{Testeranto as I}from"testeranto";var l=(e,t,r)=>I(r,t,e,{ports:0},{beforeEach:(a,n)=>c(a.reducer,n),andWhen:function(a,n){let i=n();return a.dispatch(i[0](i[1]))},butThen:function(a){return a.getState()},assertioner:function(a){return a[0](a[1],a[2],a[3])}});import{createSelector as h,createSlice as d,createStore as u}from"@reduxjs/toolkit";var o=d({name:"login app",initialState:{password:"",email:"",error:"no_error"},reducers:{setPassword:(e,t)=>{e.password=t.payload},setEmail:(e,t)=>{e.email=t.payload},signIn:e=>{e.error=y(e)}}}),T=e=>e,g=e=>e.match(/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/),y=e=>g(e.email)?e.password!=="password"&&e.email!=="adam@email.com"?"credentialFail":"no_error":"invalidEmail",f=h([T],e=>({...e,disableSubmit:e.email==""||e.password==""})),m=()=>{let e=u(o.reducer);return{app:o,select:{loginPageSelection:f},store:e}};import{features as w}from"/Users/adam/Code/kokomoBay/dist/tests/testerantoFeatures.test.js";var S=m(),E=S.select.loginPageSelection,z=S.app.actions,A=S.app.reducer,M=w.hello,Z=l({Suites:{Default:"some default Suite"},Givens:{AnEmptyState:()=>o.getInitialState(),AStateWithEmail:e=>({...o.getInitialState(),email:e})},Whens:{TheLoginIsSubmitted:()=>[o.actions.signIn],TheEmailIsSetTo:e=>[o.actions.setEmail,e],ThePasswordIsSetTo:e=>[o.actions.setPassword,e]},Thens:{TheEmailIs:e=>t=>[s.equal,t.email,e,"a nice message"],TheEmailIsNot:e=>t=>[s.notEqual,t.email,e],ThePasswordIs:e=>t=>[s.equal,t.password,e],ThePasswordIsNot:e=>t=>[s.notEqual,t.password,e]},Checks:{AnEmptyState:()=>o.getInitialState()}},(e,t,r,a,n)=>[e.Default("Testing the ReduxToolkit",[t.AnEmptyState([],[r.TheEmailIsSetTo("adam@email.com")],[a.TheEmailIs("adam@email.com")]),t.AStateWithEmail([],[r.TheEmailIsSetTo("hello")],[a.TheEmailIsNot("adam@email.com")],"bob@mail.com"),t.AnEmptyState([],[r.TheEmailIsSetTo("hello"),r.TheEmailIsSetTo("aloha")],[a.TheEmailIs("aloha")]),t.AnEmptyState([],[],[a.TheEmailIs("")])],[n.AnEmptyState("imperative style",[],async({TheEmailIsSetTo:i},{TheEmailIs:p})=>{await i("foo"),await p("foo");let P=await i("foobar");await p("foobar")})])],{reducer:A,selector:E});export{Z as AppReduxToolkitTesteranto};
