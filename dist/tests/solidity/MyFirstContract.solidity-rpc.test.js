import{assert as P}from"chai";import{features as _}from"/Users/adam/Code/kokomoBay/dist/tests/testerantoFeatures.test.js";import C from"fs";import y from"path";import v from"ganache";import D from"truffle-compile";import F from"web3";import{Testeranto as x}from"testeranto";import{ethers as p}from"ethers";var U=(...e)=>new Promise(t=>D(...e,(r,n)=>t(n))),G=async e=>{let t=y.join(__dirname,"../contracts",e),r={[t]:C.readFileSync(t,{encoding:"utf8"})},n={contracts_directory:y.join(__dirname,"../contracts"),compilers:{solc:{version:"0.5.2",settings:{optimizer:{enabled:!1,runs:200},evmVersion:"byzantium"}}}};return await U(r,n)},S=(e,t,r,n)=>x(r,t,e,{ports:1},{beforeAll:async()=>(await G(`../../../contracts/${n}.sol`))[n],beforeEach:(s,l,o)=>new Promise(I=>{let h={},a=o.ports[0],c=v.server(h);c.listen(a,async f=>{if(console.log(`ganache listening on port ${a}...`),f)throw f;let i=c.provider,m=await i.request({method:"eth_accounts",params:[]}),T=new F(i),u=await new T.eth.Contract(s.abi).deploy({data:s.bytecode}).send({from:m[0],gas:15e4}),b=new p.providers.JsonRpcProvider(`http://localhost:${a}`),w=new p.Wallet(i.getInitialAccounts()[m[1]].secretKey,b),g=new p.Contract(u.options.address,s.abi,w);I({contractNearSide:u,contractFarSide:g,accounts:m,server:c})})}),afterEach:async({server:s})=>await s.close(),andWhen:async({contractFarSide:s,accounts:l},o)=>o()({contractFarSide:s,accounts:l})});var d=(e,t,r,n)=>[e.Default([n.hello],[],[r.Get({asTestUser:1,expectation:0})],"my first contract"),e.Default([n.hello],[t.Increment(1),t.Increment(1),t.Increment(1),t.Increment(1)],[r.Get({asTestUser:1,expectation:4})],"my first contract"),e.Default([n.hello],[t.Increment(1),t.Increment(1),t.Increment(1),t.Increment(1),t.Decrement(1)],[r.Get({asTestUser:1,expectation:3})],"my first contract"),e.Default([n.hello],[t.Decrement(1),t.Decrement(1),t.Decrement(1),t.Increment(1),t.Increment(1)],[r.Get({asTestUser:1,expectation:1157920892373162e62})],"this test should fail")];var B=S({Suites:{Default:"Testing a very simple smart contract"},Givens:{Default:()=>"MyFirstContract.sol"},Whens:{Increment:e=>async({contractFarSide:t,accounts:r})=>await t.inc({gasLimit:15e4}),Decrement:e=>async({contractFarSide:t,accounts:r})=>await t.dec({gasLimit:15e4})},Thens:{Get:({asTestUser:e,expectation:t})=>async({contractFarSide:r,accounts:n})=>P.equal(t,parseInt(await r.get({gasLimit:15e4})))},Checks:{AnEmptyState:()=>"MyFirstContract.sol"}},(e,t,r,n,s)=>[e.Default("Testing a very simple smart contract over RPC",d(t,r,n,_),[])],"solSource","MyFirstContract");export{B as MyFirstContractPlusRpcTesteranto};
