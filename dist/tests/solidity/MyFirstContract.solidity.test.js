import{assert as T}from"chai";import{features as S}from"/Users/adam/Code/kokomoBay/dist/tests/testerantoFeatures.test.js";import l from"fs";import i from"path";import f from"ganache";import u from"truffle-compile";import y from"web3";import{Testeranto as I}from"testeranto";var d=(...n)=>new Promise(e=>u(...n,(r,t)=>e(t))),h=async n=>{let e=i.join(__dirname,"../contracts",n),r={[e]:l.readFileSync(e,{encoding:"utf8"})},t={contracts_directory:i.join(__dirname,"../contracts"),compilers:{solc:{version:"0.5.2",settings:{optimizer:{enabled:!1,runs:200},evmVersion:"byzantium"}}}};return await d(r,t)},m=(n,e,r,t)=>I(r,e,n,{ports:0},{beforeAll:async()=>(await h(`../../../contracts/${t}.sol`))[t],beforeEach:async o=>{let s=f.provider({seed:"drizzle-utils"}),a=new y(s),c=await a.eth.getAccounts();return{contract:await new a.eth.Contract(o.abi).deploy({data:o.bytecode}).send({from:c[0],gas:15e4}),accounts:c,provider:s}},andWhen:async({provider:o,contract:s,accounts:a},c)=>c()({contract:s,accounts:a})});var p=(n,e,r,t)=>[n.Default([t.hello],[],[r.Get({asTestUser:1,expectation:0})],"my first contract"),n.Default([t.hello],[e.Increment(1),e.Increment(1),e.Increment(1),e.Increment(1)],[r.Get({asTestUser:1,expectation:4})],"my first contract"),n.Default([t.hello],[e.Increment(1),e.Increment(1),e.Increment(1),e.Increment(1),e.Decrement(1)],[r.Get({asTestUser:1,expectation:3})],"my first contract"),n.Default([t.hello],[e.Decrement(1),e.Decrement(1),e.Decrement(1),e.Increment(1),e.Increment(1)],[r.Get({asTestUser:1,expectation:1157920892373162e62})],"this test should fail")];var z=m({Suites:{Default:"Testing a very simple smart contract"},Givens:{Default:()=>"MyFirstContract.sol"},Whens:{Increment:n=>({contract:e,accounts:r})=>e.methods.inc().send({from:r[n]}).on("receipt",function(t){return t}),Decrement:n=>({contract:e,accounts:r})=>new Promise(t=>{e.methods.dec().send({from:r[n]}).then(function(o){t(o)})})},Thens:{Get:({asTestUser:n,expectation:e})=>async({contract:r,accounts:t})=>T.equal(e,parseInt(await r.methods.get().call()))},Checks:{AnEmptyState:()=>"MyFirstContract.sol"}},(n,e,r,t,o)=>[n.Default("Testing a very simple smart contract ephemerally",p(e,r,t,S),[])],"solSource","MyFirstContract");export{z as MyFirstContractTesteranto};
