src/app.reduxToolkit.test.ts(83,3): error TS2345: Argument of type 'ITestImplementation<IAppSpecification, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { TheLoginIsSubmitted: () => [...]; TheEmailIsSetTo: (Iw_0: string) => [...]; ThePasswordIsSetTo: (Iw_0: string) => [...]; }; checks: { ...; }; }>' is not assignable to parameter of type 'ITestImplementation<IAppSpecification, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { TheLoginIsSubmitted: () => WhenShape; TheEmailIsSetTo: (Iw_0: string) => WhenShape; ThePasswordIsSetTo: (Iw_0: string) => WhenShape; }; }>'.
  Type 'ITestImplementation<IAppSpecification, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { TheLoginIsSubmitted: () => [...]; TheEmailIsSetTo: (Iw_0: string) => [...]; ThePasswordIsSetTo: (Iw_0: string) => [...]; }; checks: { ...; }; }>' is not assignable to type 'Omit<{ suites: { Default: string; }; givens: { AnEmptyState: () => IStoreState; AStateWithEmail: (Ig_0: string) => IStoreState; }; whens: { TheLoginIsSubmitted: () => (zel: IStoreState, utils: PM) => Promise<...>; TheEmailIsSetTo: (Iw_0: string) => (zel: IStoreState, utils: PM) => Promise<...>; ThePasswordIsSetTo: (...'.
    The types returned by 'checks.AnEmptyState(...)' are incompatible between these types.
      Type '() => IStoreState' is not assignable to type 'IStoreState'.

src/app.reduxToolkit.test.ts(83,3): error TS2345: Argument of type 'ITestImplementation<IAppSpecification, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { TheLoginIsSubmitted: () => [...]; TheEmailIsSetTo: (Iw_0: string) => [...]; ThePasswordIsSetTo: (Iw_0: string) => [...]; }; checks: { ...; }; }>' is not assignable to parameter of type 'ITestImplementation<IAppSpecification, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { TheLoginIsSubmitted: () => WhenShape; TheEmailIsSetTo: (Iw_0: string) => WhenShape; ThePasswordIsSetTo: (Iw_0: string) => WhenShape; }; }>'.
  Type 'ITestImplementation<IAppSpecification, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { TheLoginIsSubmitted: () => [...]; TheEmailIsSetTo: (Iw_0: string) => [...]; ThePasswordIsSetTo: (Iw_0: string) => [...]; }; checks: { ...; }; }>' is not assignable to type 'Omit<{ suites: { Default: string; }; givens: { AnEmptyState: () => IStoreState; AStateWithEmail: (Ig_0: string) => IStoreState; }; whens: { TheLoginIsSubmitted: () => (zel: IStoreState, utils: PM) => Promise<...>; TheEmailIsSetTo: (Iw_0: string) => (zel: IStoreState, utils: PM) => Promise<...>; ThePasswordIsSetTo: (...'.
    The types returned by 'checks.AnEmptyState(...)' are incompatible between these types.
      Type '() => IStoreState' is not assignable to type 'IStoreState'.
