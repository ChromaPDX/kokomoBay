src/subPackages/redux.testeranto.test.ts(30,65): error TS2314: Generic type 'IBaseTest' requires 12 type argument(s).
  Type 'ITestImplementation<ITestShape, { givens: { [K in keyof ITestShape["givens"]]: () => (...Iw: ITestShape["givens"][K]) => ITestShape; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => WhenShape; }; }>' is not assignable to type 'Omit<{ suites: { [K in keyof ITestShape["suites"]]: string; }; givens: { [K in keyof ITestShape["givens"]]: (...Ig: ITestShape["givens"][K]) => ITestShape["given"]; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => (zel: ITestShape["iselection"], utils: PM) => Promise<...>; }; thens: {...'.
    Types of property 'whens' are incompatible.
      Type '{ [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => WhenShape; }' is not assignable to type '{ [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => (zel: ITestShape["iselection"], utils: PM) => Promise<ITestShape["when"]>; }'.
        Type '(...Iw: ITestShape["whens"][K]) => WhenShape' is not assignable to type '(...Iw: ITestShape["whens"][K]) => (zel: ITestShape["iselection"], utils: PM) => Promise<ITestShape["when"]>'.
          Type 'WhenShape' is not assignable to type '(zel: ITestShape["iselection"], utils: PM) => Promise<ITestShape["when"]>'.
            Type '[tt, t]' provides no match for the signature '(zel: ITestShape["iselection"], utils: PM): Promise<ITestShape["when"]>'.

src/subPackages/redux.testeranto.test.ts(70,5): error TS2345: Argument of type 'ITestImplementation<ITestShape, { givens: { [K in keyof ITestShape["givens"]]: () => (...Iw: ITestShape["givens"][K]) => ITestShape; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => WhenShape; }; }>' is not assignable to parameter of type 'ITestImplementation<ITestShape, object>'.
  Type 'ITestImplementation<ITestShape, { givens: { [K in keyof ITestShape["givens"]]: () => (...Iw: ITestShape["givens"][K]) => ITestShape; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => WhenShape; }; }>' is not assignable to type 'Omit<{ suites: { [K in keyof ITestShape["suites"]]: string; }; givens: { [K in keyof ITestShape["givens"]]: (...Ig: ITestShape["givens"][K]) => ITestShape["given"]; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => (zel: ITestShape["iselection"], utils: PM) => Promise<...>; }; thens: {...'.
    Types of property 'whens' are incompatible.
      Type '{ [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => WhenShape; }' is not assignable to type '{ [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => (zel: ITestShape["iselection"], utils: PM) => Promise<ITestShape["when"]>; }'.
        Type '(...Iw: ITestShape["whens"][K]) => WhenShape' is not assignable to type '(...Iw: ITestShape["whens"][K]) => (zel: ITestShape["iselection"], utils: PM) => Promise<ITestShape["when"]>'.
          Type 'WhenShape' is not assignable to type '(zel: ITestShape["iselection"], utils: PM) => Promise<ITestShape["when"]>'.
            Type '[tt, t]' provides no match for the signature '(zel: ITestShape["iselection"], utils: PM): Promise<ITestShape["when"]>'.
