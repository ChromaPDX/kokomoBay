src/subPackages/reduxToolkit.testeranto.test.ts(39,22): error TS2314: Generic type 'IBaseTest' requires 12 type argument(s).
  Type 'ITestImplementation<ITestShape, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => WhenShape; }; }>' is not assignable to type 'Omit<{ suites: { [K in keyof ITestShape["suites"]]: string; }; givens: { [K in keyof ITestShape["givens"]]: (...Ig: ITestShape["givens"][K]) => ITestShape["given"]; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => (zel: ITestShape["iselection"], utils: PM) => Promise<...>; }; thens: {...'.
    Types of property 'givens' are incompatible.
      Type '{ AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }' is not assignable to type '{ [K in keyof ITestShape["givens"]]: (...Ig: ITestShape["givens"][K]) => ITestShape["given"]; }'.
src/subPackages/reduxToolkit.testeranto.test.ts(82,5): error TS2345: Argument of type 'ITestImplementation<ITestShape, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => WhenShape; }; }>' is not assignable to parameter of type 'ITestImplementation<ITestShape, object>'.
  Type 'ITestImplementation<ITestShape, { givens: { AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => WhenShape; }; }>' is not assignable to type 'Omit<{ suites: { [K in keyof ITestShape["suites"]]: string; }; givens: { [K in keyof ITestShape["givens"]]: (...Ig: ITestShape["givens"][K]) => ITestShape["given"]; }; whens: { [K in keyof ITestShape["whens"]]: (...Iw: ITestShape["whens"][K]) => (zel: ITestShape["iselection"], utils: PM) => Promise<...>; }; thens: {...'.
    Types of property 'givens' are incompatible.
      Type '{ AnEmptyState: () => () => IStoreState; AStateWithEmail: () => (Iw_0: string) => IStoreState; }' is not assignable to type '{ [K in keyof ITestShape["givens"]]: (...Ig: ITestShape["givens"][K]) => ITestShape["given"]; }'.